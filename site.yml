- name: alhalla_m API deployment  
  hosts:  "{{ target }}"
  remote_user: ansible
  gather_facts: yes  
  become: true  
 
  vars:
     user_name: "ansible"     
     PROCESS: "alhalla-m"        
     vault_vars: |
        vault_alhalla_m_alhalla_web_db_user : {{ alhalla_m_alhalla_web_db_user }}
        vault_alhalla_m_alhalla_web_db_password : {{ alhalla_m_alhalla_web_db_password }}
        vault_alhalla_m_aux_mdm_db_user: {{ alhalla_m_aux_mdm_db_user }}
        vault_alhalla_m_aux_mdm_db_password: {{ alhalla_m_aux_mdm_db_password }}
        vault_alhalla_m_encryption_key: {{ alhalla_m_encryption_key }}
        vault_alhalla_m_encryption_init_vector: {{ alhalla_m_encryption_init_vector }}
        vault_alhalla_m_jwt_signing_key : {{ alhalla_m_jwt_signing_key }}
        vault_alhalla_sendgrid_api_key : {{ alhalla_sendgrid_api_key }}

     #  vars_files:
          #    - ./group_vars/vars.yml
      #    - ./group_vars/vault.yml
 
  roles:   
       # - java
       # - monit
  tasks:

              
          # - name: Print some debug information
          #    vars:
          #      vault_vars: |
          #        alhalla_m_alhalla_web_db_user : {{ vault_alhalla_m_alhalla_web_db_user }}
          #        alhalla_m_alhalla_web_db_password : {{ vault_alhalla_m_alhalla_web_db_password }}

  - debug:
       msg: "{{ vault_vars.split('\n') }}"
       verbosity: 1
       #tags: debug_info

  #Create required directories
  - name: Create directory to store binaries
    # shell: "mkdir {{ bin_file_path }}"
    file:
       path: "{{ ansible_bin_files }}"
       state: directory
       group: "{{ user_name }}"
       owner: "{{ user_name }}"   
     

   #alhalla_m_get_binary
  - name: Clean old binaries
    file:
      path: "{{ tarball_location }}/tmp-{{ tarball_name }}"
      state: absent     
    ignore_errors: True   

    #Download latest binaries in to {{ tarball_tmp_location }} with 'tmp-' prefix
    # - name: Download latest binaries from artifactory
  - name: Downloading dummy tar file from puplic location
    get_url:
        url: "{{ artifactory_path }}{{ tarball_name }}"
        dest:  "{{ tarball_tmp_location }}"
        # backup: yes        

  - name: Rename tar file
    shell: "mv {{ tarball_tmp_location }}/{{ tarball_name }}  {{ tarball_tmp_location }}/tmp-{{ tarball_name }} "

  - name: Move latest binaries to appropriate location
    shell: "mv {{ tarball_tmp_location }}/tmp-{{tarball_name }} {{ master_base_dir }} "  

  - debug:
      msg: "This only displays with ansible-playbook -vv:-  alhalla_m_alhalla_web_db_password : {{ alhalla_m_alhalla_web_db_password }}"
      verbosity: 2

  #File in puppet- alhalla_mi_binary
  - name: Copy tar file to bin file location
    copy:
        src: "{{ master_base_dir }}/tmp-{{ tarball_name }}"
        dest: "{{ ansible_bin_files }}/{{ tarball_name }}"
        remote_src: yes
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: "{{ managed_file_mode }}"

  #alhalla_m_kill      
  - name: Get running processes
    shell: "ps -ef | grep -v grep | grep -w {{ PROCESS }} | awk '{print $2}'"
    register: running_processes
    ignore_errors: yes

  - name: Kill running processes
    shell: "kill {{ item }}"
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes

  - wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    register: killed_processes

  - name: Force kill stuck processes
    shell: "kill -9 {{ item }}"
    with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
    ignore_errors: yes


  # Installation
  - name: Delete old base directory
    file:
      path: "{{ base_dir }}"
      state: absent
 # ignore_errors: True
  - name: create new base directory
    file:
       path: "{{ base_dir }}"
       state: directory
       group: "{{ user_name }}"
       owner: "{{ user_name }}"

  - name: Unpack binaries
    shell: "tar -xf {{ ansible_bin_files }}/{{ tarball_name }} -C {{ base_dir }} --strip-components 1 "
    args:
       executable: /usr/bin/bash
       warn: false
 

       #  - name: Extracting downloaded tar file 
       #    unarchive:
       #        src: "{{ bin_file_path }}/{{ tarball_name }}"
       #        dest:  "{{ base_dir }}"
       #        remote_src: yes
       #        keep_newer: yes
       #        owner: "{{ user_name }}"
       #        group: "{{ user_name }}"
       #        mode:  "{{ managed_file_mode }}"
       #        extra_opts: [--strip-components=1]

     #- name: running   
  
            
           
